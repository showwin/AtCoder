#!/usr/bin/env python3
import sys


def solve(N: int, x: "List[int]", y: "List[int]"):
    idx = {}
    for i in range(N):
        idx[i] = [x[i], y[i]]

    point_set = set([f'{x[i]},{y[i]}' for i in range(N)])

    x_idx = {}
    y_idx = {}
    for i in range(N):
        if x[i] in x_idx:
            x_idx[x[i]].append(i)
        else:
            x_idx[x[i]] = [i]

        if y[i] in y_idx:
            y_idx[y[i]].append(i)
        else:
            y_idx[y[i]] = [i]

    pool = []
    for i in range(N):
        pool.append([x[i], y[i]])

    result = 0
    id_incr = N - 1
    while pool:
        base = pool.pop()
        print('base is', base)
        x = base[0]
        y = base[1]
        x_friends = x_idx.get(x)
        y_friends = y_idx.get(y)
        if x_friends and y_friends:
            # 点を作成
            for xf_id in x_friends:
                same_x_point = idx[xf_id]
                for yf_id in y_friends:
                    same_y_point = idx[yf_id]
                    new_point_str = f'{same_y_point[0]},{same_x_point[1]}'
                    if new_point_str not in point_set:
                        # 点を追加
                        new_point = [same_y_point[0], same_x_point[1]]
                        print(new_point)
                        pool.append(new_point)
                        idx[id_incr] = new_point
                        point_set.add(f'{new_point[0]},{new_point[1]}')
                        x_idx[new_point[0]].append(id_incr)
                        y_idx[new_point[1]].append(id_incr)
                        id_incr += 1
                        result += 1

                        # 追加点周辺のやつはpoolに戻す

    print(result)
    return


# Generated by 1.1.5 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    x = [int()] * (N)  # type: "List[int]"
    y = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        x[i] = int(next(tokens))
        y[i] = int(next(tokens))
    solve(N, x, y)

if __name__ == '__main__':
    main()
