#!/usr/bin/env python3
import sys
from heapq import heappop, heappush

sys.setrecursionlimit(10 ** 7)


YES = "Yes"  # type: str
NO = "No"  # type: str


def solve(N: int, A: "List[int]", B: "List[int]"):
    task_index = {}
    for i in range(N):
        if B[i] in task_index:
            task_index[B[i]].append(A[i])
        else:
            task_index[B[i]] = [A[i]]

    sum_task_time = sum(A)
    dead_line_pool = []
    for i in B:
        heappush(dead_line_pool, -i)

    for _ in range(N):
        last_dead_line = -heappop(dead_line_pool)
        if sum_task_time > last_dead_line:
            print('No')
            return
        else:
            sum_task_time -= task_index[last_dead_line].pop()

    print('Yes')
    return


# Generated by 1.1.5 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, A, B)

if __name__ == '__main__':
    main()
